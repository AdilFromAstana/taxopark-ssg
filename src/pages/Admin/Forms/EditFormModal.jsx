/* eslint-disable react/prop-types */
import { Modal, Form, Input, Button, Select, Timeline, message } from "antd";
import axios from "axios";
import { useState, useEffect } from "react";
import "./style.css";

const statuses = {
  consultation: [
    {
      code: "registered",
      title: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
      next: [
        {
          code: "sent_to_other_park",
          title: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∫",
          requires_reason: true,
        },
        { code: "thinking", title: "–ö–ª–∏–µ–Ω—Ç –¥—É–º–∞–µ—Ç", requires_reason: false },
        {
          code: "no_answer",
          title: "–ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
          requires_reason: false,
        },
        {
          code: "incorrect_data",
          title: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
          requires_reason: true,
        },
        { code: "approved", title: "–ü–æ–¥–∫–ª—é—á–µ–Ω", requires_reason: false },
        { code: "rejected", title: "–û—Ç–∫–ª–æ–Ω–µ–Ω", requires_reason: true },
      ],
    },
    {
      code: "sent_to_other_park",
      title: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∫",
      next: [
        { code: "approved", title: "–ü–æ–¥–∫–ª—é—á–µ–Ω", requires_reason: false },
        { code: "rejected", title: "–û—Ç–∫–ª–æ–Ω–µ–Ω", requires_reason: true },
      ],
    },
    {
      code: "thinking",
      title: "–ö–ª–∏–µ–Ω—Ç –¥—É–º–∞–µ—Ç",
      next: [
        { code: "approved", title: "–ü–æ–¥–∫–ª—é—á–µ–Ω", requires_reason: false },
        { code: "rejected", title: "–û—Ç–∫–ª–æ–Ω–µ–Ω", requires_reason: true },
      ],
    },
    {
      code: "no_answer",
      title: "–ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
      next: [
        {
          code: "registered",
          title: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
          requires_reason: false,
        },
        { code: "rejected", title: "–û—Ç–∫–ª–æ–Ω–µ–Ω", requires_reason: true },
      ],
    },
    {
      code: "incorrect_data",
      title: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
      next: [
        {
          code: "registered",
          title: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
          requires_reason: false,
        },
        { code: "rejected", title: "–û—Ç–∫–ª–æ–Ω–µ–Ω", requires_reason: true },
      ],
    },
    {
      code: "approved",
      title: "–ü–æ–¥–∫–ª—é—á–µ–Ω",
      next: [],
    },
    {
      code: "rejected",
      title: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
      next: [],
    },
  ],
  taxiPark: [
    {
      code: "registered",
      title: "–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      next: [
        {
          code: "sent_to_partner",
          title: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä—É",
          requires_reason: false,
        },
      ],
    },
    {
      code: "sent_to_partner",
      title: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä—É",
      next: [
        {
          code: "partner_error",
          title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É",
          requires_reason: true,
        },
        { code: "approved", title: "–ü–æ–¥–∫–ª—é—á–µ–Ω", requires_reason: false },
        { code: "rejected", title: "–û—Ç–∫–ª–æ–Ω–µ–Ω", requires_reason: true },
      ],
    },
    {
      code: "partner_error",
      title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É",
      next: [
        {
          code: "registered",
          title: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
          requires_reason: false,
        },
        { code: "rejected", title: "–û—Ç–∫–ª–æ–Ω–µ–Ω", requires_reason: true },
      ],
    },
    {
      code: "approved",
      title: "–ü–æ–¥–∫–ª—é—á–µ–Ω",
      next: [],
    },
    {
      code: "rejected",
      title: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
      next: [],
    },
  ],
};

const API_URL = import.meta.env.VITE_API_URL;

const EditFormModal = ({ open, onClose, record }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [statusOptions, setStatusOptions] = useState([]);
  const [requiresReason, setRequiresReason] = useState(false);
  const [history, setHistory] = useState([]);
  const status = Form.useWatch("status", form);
  const reason = Form.useWatch("reason", form);

  const fetchStatusHistory = async () => {
    try {
      const response = await axios.get(
        `${API_URL}/forms/${record.id}/statusHistory`
      );
      setHistory(response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:", error);
    }
  };

  useEffect(() => {
    if (record?.id) {
      fetchStatusHistory();
    }
  }, [record?.id]);

  useEffect(() => {
    if (record?.statusCode) {
      const currentStatus = statuses.taxiPark.find(
        (s) => s.code === record.statusCode
      );
      if (currentStatus) {
        setStatusOptions(currentStatus.next);
      }
    }
  }, [record?.statusCode]);

  const handleStatusChange = (value) => {
    const selectedStatus = statusOptions.find((s) => s.code === value);
    setRequiresReason(selectedStatus?.requires_reason || false);
  };

  const handleUpdate = async () => {
    const data = form.getFieldsValue();
    try {
      setLoading(true);
      if (requiresReason && !data.reason) {
        message.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞!");
        return;
      }
      const payload = { newStatusCode: data.status };
      if (requiresReason) {
        payload.reason = data.reason;
      }
      const response = await axios.put(
        `${API_URL}/forms/${record.id}/status`,
        payload
      );

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", response.data);
      message.success("üéâ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");

      handleClose(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
      message.error(
        `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${
          error.response?.data?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }`
      );
    } finally {
      setLoading(false);
      console.log("üîΩ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.");
    }
  };

  const handleClose = () => {
    form.resetFields();
    setIsEditMode(false);
    onClose();
  };

  const resetStatusAndReason = () => {
    form.setFieldValue("status", undefined);
    form.setFieldValue("reason", undefined);
  };

  const isUpdateButtonDisabled = requiresReason ? !(status && reason) : !status;

  return (
    <Modal
      open={open}
      onCancel={handleClose}
      title="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
      footer={null}
      maskClosable={false}
    >
      <Form
        form={form}
        layout="vertical"
        initialValues={record}
        onFinish={handleUpdate}
      >
        <Form.Item name="name" label="–§–ò–û">
          <Input disabled />
        </Form.Item>
        <Form.Item name="phoneNumber" label="–ù–æ–º–µ—Ä">
          <Input disabled />
        </Form.Item>
        <Form.Item name="formType" label="–¢–∏–ø –∑–∞—è–≤–∫–∏">
          <Input disabled />
        </Form.Item>
        {record.parkId && (
          <Form.Item name={["Park", "title"]} label="–¢–∞–∫—Å–æ–ø–∞—Ä–∫">
            <Input disabled />
          </Form.Item>
        )}
        <Form.Item label="–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞">
          <Timeline style={{ marginTop: 8 }}>
            {history.map((item, index) => {
              const newStatus = statuses[record?.formType]?.find(
                (s) => s.code === item.newStatusCode
              );
              const isLastItem = index === history.length - 1;
              return (
                <Timeline.Item
                  key={item.id}
                  className={isLastItem ? "blinking" : ""}
                >
                  {newStatus ? newStatus.title : item.newStatusCode} (
                  {new Date(item.createdAt).toLocaleString()})
                  {item.reason && (
                    <div style={{ color: "#888" }}>–ü—Ä–∏—á–∏–Ω–∞: {item.reason}</div>
                  )}
                </Timeline.Item>
              );
            })}
          </Timeline>
        </Form.Item>
        <Form.Item name="status" label="–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞">
          <Select
            disabled={!isEditMode}
            onChange={handleStatusChange}
            allowClear
          >
            {statusOptions.map((status) => (
              <Select.Option key={status.code} value={status.code}>
                {status.title}
              </Select.Option>
            ))}
          </Select>
        </Form.Item>
        {requiresReason && (
          <Form.Item
            name="reason"
            label="–ü—Ä–∏—á–∏–Ω–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞"
            rules={[{ required: true, message: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É!" }]}
          >
            <Input.TextArea
              disabled={!isEditMode}
              rows={3}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞"
            />
          </Form.Item>
        )}

        <div
          style={{
            marginTop: "16px",
            display: "flex",
            justifyContent: "space-between",
          }}
        >
          {isEditMode ? (
            <>
              <Button
                type="primary"
                onClick={handleUpdate}
                loading={loading}
                disabled={isUpdateButtonDisabled}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
              <Button
                onClick={() => {
                  setIsEditMode(false);
                  resetStatusAndReason();
                  handleStatusChange(undefined);
                }}
                danger
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </>
          ) : (
            <Button type="primary" onClick={() => setIsEditMode(true)}>
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </Button>
          )}
        </div>
      </Form>
    </Modal>
  );
};

export default EditFormModal;
