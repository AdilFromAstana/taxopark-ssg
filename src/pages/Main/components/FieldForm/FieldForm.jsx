import { useState } from "react";
import { Form, Input, Button, message } from "antd";
import PhoneInput from "react-phone-input-2";
import "./FieldForm.css";
import SupportModal from "./SupportModal/SupportModal";
import axios from "axios";
import moment from "moment"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º moment.js

const API_URL = import.meta.env.VITE_API_URL;

function FieldForm() {
  const [phone, setPhone] = useState("");
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [resendTime, setResendTime] = useState(null); // –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å OTP

  const handleSubmit = async (values) => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_URL}/forms`, {
        name: values.name,
        phoneNumber: phone,
        formType: "consultation",
      });

      if (response.status === 201) {
        message.success("OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
        setStep(2);
        setIsModalOpen(true);

        // üìå –ë–µ—Ä–µ–º –≤—Ä–µ–º—è `createdAt`, –¥–æ–±–∞–≤–ª—è–µ–º 1 –º–∏–Ω—É—Ç—É
        const createdAt = response.data.createdAt;
        const nextResendTime = moment(createdAt).add(1, "minute"); // +1 –º–∏–Ω—É—Ç–∞
        setResendTime(nextResendTime);
      } else {
        message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="field-form">
      <div className="field-form-header">
        <div className="field-form-content">
          <div className="field-form-left">
            <h1 className="field-form-title">–í—ã–±–∏—Ä–∞–π –ª—É—á—à–∏–π –¢–∞–∫—Å–æ–ü–∞—Ä–∫!</h1>
            <p className="field-form-description">
              –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã!
            </p>
          </div>

          <div className="field-form-right">
            <h2 className="field-form-form-title">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!</h2>
            <Form layout="vertical" onFinish={handleSubmit}>
              <Form.Item
                label="–§–ò–û"
                name="name"
                rules={[{ required: true, message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û" }]}
              >
                <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û" />
              </Form.Item>
              <Form.Item
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                name="phone"
                rules={[
                  {
                    required: true,
                    message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                  },
                ]}
              >
                <PhoneInput
                  country="kz"
                  onlyCountries={["kz"]}
                  value={phone}
                  onChange={(value) => setPhone(value)}
                  placeholder="+7-777-77-77-77"
                  disableDropdown={true}
                  masks={{ kz: "(...) ...-..-.." }}
                />
              </Form.Item>
              <Button
                type="primary"
                size="large"
                htmlType="submit"
                block
                loading={loading}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </Button>
            </Form>
          </div>
        </div>
      </div>

      <SupportModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        phone={phone}
        setPhone={setPhone}
        setStep={setStep}
        step={step}
        resendTime={resendTime} // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      />
    </div>
  );
}

export default FieldForm;
