/* eslint-disable react/prop-types */
import { memo, useEffect, useState } from "react";
import { Modal, Button, Input, message } from "antd";
import "react-phone-input-2/lib/style.css";
import moment from "moment";

const OTPInput = ({ value, onChange }) => (
  <Input.OTP
    style={{ width: "100%", height: "50px" }}
    length={4}
    type="tel"
    value={value}
    onChange={(e) => onChange(e)}
    placeholder="–í–≤–µ–¥–∏—Ç–µ OTP-–∫–æ–¥"
  />
);

const OtpVerification = ({ phone, setStep, onClose, resendTime }) => {
  const [otpSent, setOtpSent] = useState(false);
  const [otp, setOtp] = useState("1234");
  const [inputOtp, setInputOtp] = useState("");
  const now = moment();
  const isResendDisabled = resendTime && now.isBefore(resendTime);

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP
  useEffect(() => {
    let interval;
    if (otpSent) {
      interval = setInterval(() => {
        setTimer((prev) => {
          if (prev === 1) {
            clearInterval(interval);
            setOtpSent(false);
            return 60; // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [otpSent]);

  const sendOtp = () => {
    if (!phone || phone.length < 11) {
      message.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
      return;
    }
    setOtpSent(true);
    setTimer(60);
    message.success("OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
  };

  const handleOtpVerification = () => {
    if (inputOtp === otp) {
      message.success("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      setStep(3);
    } else {
      message.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π OTP-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  return (
    <>
      <p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:</p>
      <OTPInput value={inputOtp} onChange={setInputOtp} />
      <Button
        type="primary"
        size="large"
        block
        style={{ marginTop: "10px" }}
        onClick={handleOtpVerification}
      >
        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
      </Button>
      <div className="flex flex-col items-center mt-2">
        <Button type="link" onClick={() => setStep(1)}>
          –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
        </Button>
        <Button
          type="link"
          onClick={sendOtp}
          disabled={isResendDisabled} // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        >
          {isResendDisabled
            ? `–û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP —Å–Ω–æ–≤–∞ (${resendTime.diff(now, "seconds")} —Å–µ–∫)`
            : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP —Å–Ω–æ–≤–∞"}
        </Button>
      </div>
    </>
  );
};

// üìå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const SuccessMessage = ({ setStep, onClose }) => (
  <div className="text-center">
    <p className="text-lg mb-4">–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</p>
    <p>–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
    <Button
      type="primary"
      size="large"
      className="mt-4"
      onClick={() => {
        setStep(1);
        onClose();
      }}
    >
      –ó–∞–∫—Ä—ã—Ç—å
    </Button>
  </div>
);

// üìå –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const ApplicationModal = memo(
  ({ isOpen, onClose, phone, setStep, step, resendTime }) => {
    useEffect(() => {
      document.body.style.overflow = isOpen ? "hidden" : "";
      return () => {
        document.body.style.overflow = "";
      };
    }, [isOpen]);

    return (
      <Modal
        title={
          step === 2
            ? "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            : step === 3
            ? "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            : ""
        }
        open={isOpen}
        onCancel={onClose}
        maskClosable={false}
        footer={null}
      >
        {step === 2 && (
          <OtpVerification phone={phone} setStep={setStep} onClose={onClose} />
        )}
        {step === 3 && <SuccessMessage setStep={setStep} onClose={onClose} />}
      </Modal>
    );
  }
);

ApplicationModal.displayName = "ApplicationModal";
export default ApplicationModal;
